"use strict";
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/firestore_v1_proto_api");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const firestoreModule = require("../src/v1");
const stream_1 = require("stream");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/v1.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
function stubServerStreamingCall(response, error) {
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => {
        mockStream.write({});
    });
    setImmediate(() => {
        mockStream.end();
    });
    return sinon.stub().returns(mockStream);
}
function stubBidiStreamingCall(response, error) {
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => {
                mockStream.write({});
            });
        }
        setImmediate(() => {
            mockStream.end();
        });
    }
    else {
        setImmediate(() => {
            mockStream.write({});
        });
        setImmediate(() => {
            mockStream.end();
        });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                },
            };
        },
    };
    return sinon.stub().returns(asyncIterable);
}
(0, mocha_1.describe)('v1.FirestoreClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has apiEndpoint', () => {
            const client = new firestoreModule.FirestoreClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'firestore.googleapis.com');
        });
        (0, mocha_1.it)('has universeDomain', () => {
            const client = new firestoreModule.FirestoreClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, 'googleapis.com');
        });
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            (0, mocha_1.it)('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = firestoreModule.FirestoreClient.servicePath;
                assert.strictEqual(servicePath, 'firestore.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
            (0, mocha_1.it)('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = firestoreModule.FirestoreClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'firestore.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        (0, mocha_1.it)('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new firestoreModule.FirestoreClient({
                universeDomain: 'example.com',
            });
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'firestore.example.com');
        });
        (0, mocha_1.it)('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new firestoreModule.FirestoreClient({
                universe_domain: 'example.com',
            });
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'firestore.example.com');
        });
        if (typeof process === 'object' && 'env' in process) {
            (0, mocha_1.describe)('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                (0, mocha_1.it)('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new firestoreModule.FirestoreClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'firestore.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    }
                    else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
                (0, mocha_1.it)('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new firestoreModule.FirestoreClient({
                        universeDomain: 'configured.example.com',
                    });
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'firestore.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    }
                    else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        (0, mocha_1.it)('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => {
                new firestoreModule.FirestoreClient({
                    universe_domain: 'example.com',
                    universeDomain: 'example.net',
                });
            });
        });
        (0, mocha_1.it)('has port', () => {
            const port = firestoreModule.FirestoreClient.port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new firestoreModule.FirestoreClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new firestoreModule.FirestoreClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.firestoreStub, undefined);
            await client.initialize();
            assert(client.firestoreStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.firestoreStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.firestoreStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon
                .stub()
                .callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('getDocument', () => {
        (0, mocha_1.it)('invokes getDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.GetDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.GetDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.getDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.getDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.GetDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.GetDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.getDocument =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.GetDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.GetDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDocument(request), expectedError);
            const actualRequest = client.innerApiCalls.getDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getDocument with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.GetDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.GetDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getDocument(request), expectedError);
        });
    });
    (0, mocha_1.describe)('updateDocument', () => {
        (0, mocha_1.it)('invokes updateDocument without error', async () => {
            var _a;
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.UpdateDocumentRequest());
            (_a = request.document) !== null && _a !== void 0 ? _a : (request.document = {});
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.UpdateDocumentRequest', ['document', 'name']);
            request.document.name = defaultValue1;
            const expectedHeaderRequestParams = `document.name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.updateDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.updateDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateDocument without error using callback', async () => {
            var _a;
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.UpdateDocumentRequest());
            (_a = request.document) !== null && _a !== void 0 ? _a : (request.document = {});
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.UpdateDocumentRequest', ['document', 'name']);
            request.document.name = defaultValue1;
            const expectedHeaderRequestParams = `document.name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.updateDocument =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateDocument with error', async () => {
            var _a;
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.UpdateDocumentRequest());
            (_a = request.document) !== null && _a !== void 0 ? _a : (request.document = {});
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.UpdateDocumentRequest', ['document', 'name']);
            request.document.name = defaultValue1;
            const expectedHeaderRequestParams = `document.name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateDocument(request), expectedError);
            const actualRequest = client.innerApiCalls.updateDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateDocument with closed client', async () => {
            var _a;
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.UpdateDocumentRequest());
            (_a = request.document) !== null && _a !== void 0 ? _a : (request.document = {});
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.UpdateDocumentRequest', ['document', 'name']);
            request.document.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateDocument(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteDocument', () => {
        (0, mocha_1.it)('invokes deleteDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.DeleteDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.DeleteDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.DeleteDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.DeleteDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDocument =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.DeleteDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.DeleteDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDocument(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteDocument with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.DeleteDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.DeleteDocumentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteDocument(request), expectedError);
        });
    });
    (0, mocha_1.describe)('beginTransaction', () => {
        (0, mocha_1.it)('invokes beginTransaction without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BeginTransactionRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionResponse());
            client.innerApiCalls.beginTransaction = stubSimpleCall(expectedResponse);
            const [response] = await client.beginTransaction(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.beginTransaction.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.beginTransaction.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes beginTransaction without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BeginTransactionRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionResponse());
            client.innerApiCalls.beginTransaction =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.beginTransaction(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.beginTransaction.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.beginTransaction.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes beginTransaction with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BeginTransactionRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.beginTransaction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.beginTransaction(request), expectedError);
            const actualRequest = client.innerApiCalls.beginTransaction.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.beginTransaction.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes beginTransaction with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BeginTransactionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BeginTransactionRequest', ['database']);
            request.database = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.beginTransaction(request), expectedError);
        });
    });
    (0, mocha_1.describe)('commit', () => {
        (0, mocha_1.it)('invokes commit without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CommitRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CommitRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.CommitResponse());
            client.innerApiCalls.commit = stubSimpleCall(expectedResponse);
            const [response] = await client.commit(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.commit.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.commit.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes commit without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CommitRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CommitRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.CommitResponse());
            client.innerApiCalls.commit =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.commit(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.commit.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.commit.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes commit with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CommitRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CommitRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.commit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.commit(request), expectedError);
            const actualRequest = client.innerApiCalls.commit.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.commit.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes commit with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CommitRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CommitRequest', ['database']);
            request.database = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.commit(request), expectedError);
        });
    });
    (0, mocha_1.describe)('rollback', () => {
        (0, mocha_1.it)('invokes rollback without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RollbackRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RollbackRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.rollback = stubSimpleCall(expectedResponse);
            const [response] = await client.rollback(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.rollback.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.rollback.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes rollback without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RollbackRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RollbackRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.rollback =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.rollback(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.rollback.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.rollback.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes rollback with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RollbackRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RollbackRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.rollback = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rollback(request), expectedError);
            const actualRequest = client.innerApiCalls.rollback.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.rollback.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes rollback with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RollbackRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RollbackRequest', ['database']);
            request.database = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.rollback(request), expectedError);
        });
    });
    (0, mocha_1.describe)('batchWrite', () => {
        (0, mocha_1.it)('invokes batchWrite without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchWriteRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchWriteRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BatchWriteResponse());
            client.innerApiCalls.batchWrite = stubSimpleCall(expectedResponse);
            const [response] = await client.batchWrite(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchWrite.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchWrite.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchWrite without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchWriteRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchWriteRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BatchWriteResponse());
            client.innerApiCalls.batchWrite =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.batchWrite(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchWrite.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchWrite.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchWrite with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchWriteRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchWriteRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchWrite = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchWrite(request), expectedError);
            const actualRequest = client.innerApiCalls.batchWrite.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchWrite.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchWrite with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchWriteRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchWriteRequest', ['database']);
            request.database = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.batchWrite(request), expectedError);
        });
    });
    (0, mocha_1.describe)('createDocument', () => {
        (0, mocha_1.it)('invokes createDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CreateDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.createDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.createDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CreateDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.Document());
            client.innerApiCalls.createDocument =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CreateDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createDocument(request), expectedError);
            const actualRequest = client.innerApiCalls.createDocument.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createDocument.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createDocument with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.CreateDocumentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.CreateDocumentRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createDocument(request), expectedError);
        });
    });
    (0, mocha_1.describe)('batchGetDocuments', () => {
        (0, mocha_1.it)('invokes batchGetDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchGetDocumentsRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsResponse());
            client.innerApiCalls.batchGetDocuments =
                stubServerStreamingCall(expectedResponse);
            const stream = client.batchGetDocuments(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchGetDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchGetDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchGetDocuments without error and gaxServerStreamingRetries enabled', async () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchGetDocumentsRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsResponse());
            client.innerApiCalls.batchGetDocuments =
                stubServerStreamingCall(expectedResponse);
            const stream = client.batchGetDocuments(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchGetDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchGetDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchGetDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchGetDocumentsRequest', ['database']);
            request.database = defaultValue1;
            const expectedHeaderRequestParams = `database=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchGetDocuments = stubServerStreamingCall(undefined, expectedError);
            const stream = client.batchGetDocuments(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            const actualRequest = client.innerApiCalls.batchGetDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchGetDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchGetDocuments with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.BatchGetDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.BatchGetDocumentsRequest', ['database']);
            request.database = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.batchGetDocuments(request, {
                retryRequestOptions: { noResponseRetries: 0 },
            });
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
        (0, mocha_1.it)('should create a client with gaxServerStreamingRetries enabled', () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            assert(client);
        });
    });
    (0, mocha_1.describe)('runQuery', () => {
        (0, mocha_1.it)('invokes runQuery without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.RunQueryResponse());
            client.innerApiCalls.runQuery = stubServerStreamingCall(expectedResponse);
            const stream = client.runQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runQuery without error and gaxServerStreamingRetries enabled', async () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.RunQueryResponse());
            client.innerApiCalls.runQuery = stubServerStreamingCall(expectedResponse);
            const stream = client.runQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runQuery with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.runQuery = stubServerStreamingCall(undefined, expectedError);
            const stream = client.runQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            const actualRequest = client.innerApiCalls.runQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runQuery with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.runQuery(request, {
                retryRequestOptions: { noResponseRetries: 0 },
            });
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
        (0, mocha_1.it)('should create a client with gaxServerStreamingRetries enabled', () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            assert(client);
        });
    });
    (0, mocha_1.describe)('runAggregationQuery', () => {
        (0, mocha_1.it)('invokes runAggregationQuery without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunAggregationQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryResponse());
            client.innerApiCalls.runAggregationQuery =
                stubServerStreamingCall(expectedResponse);
            const stream = client.runAggregationQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runAggregationQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runAggregationQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runAggregationQuery without error and gaxServerStreamingRetries enabled', async () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunAggregationQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryResponse());
            client.innerApiCalls.runAggregationQuery =
                stubServerStreamingCall(expectedResponse);
            const stream = client.runAggregationQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runAggregationQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runAggregationQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runAggregationQuery with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunAggregationQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.runAggregationQuery = stubServerStreamingCall(undefined, expectedError);
            const stream = client.runAggregationQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            const actualRequest = client.innerApiCalls.runAggregationQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runAggregationQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runAggregationQuery with closed client', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.RunAggregationQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.RunAggregationQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            const stream = client.runAggregationQuery(request, {
                retryRequestOptions: { noResponseRetries: 0 },
            });
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
        });
        (0, mocha_1.it)('should create a client with gaxServerStreamingRetries enabled', () => {
            const client = new firestoreModule.FirestoreClient({
                gaxServerStreamingRetries: true,
            });
            assert(client);
        });
    });
    (0, mocha_1.describe)('write', () => {
        (0, mocha_1.it)('invokes write without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.WriteRequest());
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.WriteResponse());
            client.innerApiCalls.write = stubBidiStreamingCall(expectedResponse);
            const stream = client.write();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.write.getCall(0).calledWith(null));
            assert.deepStrictEqual(stream._transform.getCall(0)
                .args[0], request);
        });
        (0, mocha_1.it)('invokes write with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.WriteRequest());
            const expectedError = new Error('expected');
            client.innerApiCalls.write = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.write();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.write.getCall(0).calledWith(null));
            assert.deepStrictEqual(stream._transform.getCall(0)
                .args[0], request);
        });
    });
    (0, mocha_1.describe)('listen', () => {
        (0, mocha_1.it)('invokes listen without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListenRequest());
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1.ListenResponse());
            client.innerApiCalls.listen = stubBidiStreamingCall(expectedResponse);
            const stream = client.listen();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listen.getCall(0).calledWith(null));
            assert.deepStrictEqual(stream._transform.getCall(0)
                .args[0], request);
        });
        (0, mocha_1.it)('invokes listen with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListenRequest());
            const expectedError = new Error('expected');
            client.innerApiCalls.listen = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.listen();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.listen.getCall(0).calledWith(null));
            assert.deepStrictEqual(stream._transform.getCall(0)
                .args[0], request);
        });
    });
    (0, mocha_1.describe)('listDocuments', () => {
        (0, mocha_1.it)('invokes listDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
            ];
            client.innerApiCalls.listDocuments = stubSimpleCall(expectedResponse);
            const [response] = await client.listDocuments(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listDocuments without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
            ];
            client.innerApiCalls.listDocuments =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listDocuments(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDocuments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDocuments(request), expectedError);
            const actualRequest = client.innerApiCalls.listDocuments.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listDocuments.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listDocumentsStream without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
            ];
            client.descriptors.page.listDocuments.createStream =
                stubPageStreamingCall(expectedResponse);
            const stream = client.listDocumentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listDocuments, request));
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listDocumentsStream with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDocuments.createStream =
                stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDocumentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listDocuments, request));
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
                generateSampleMessage(new protos.google.firestore.v1.Document()),
            ];
            client.descriptors.page.listDocuments.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listDocumentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listDocuments.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listDocuments.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListDocumentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['parent']);
            request.parent = defaultValue1;
            const defaultValue2 = getTypeDefaultValue('.google.firestore.v1.ListDocumentsRequest', ['collectionId']);
            request.collectionId = defaultValue2;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}&collection_id=${defaultValue2 !== null && defaultValue2 !== void 0 ? defaultValue2 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDocuments.asyncIterate =
                stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDocumentsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listDocuments.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listDocuments.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('partitionQuery', () => {
        (0, mocha_1.it)('invokes partitionQuery without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
            ];
            client.innerApiCalls.partitionQuery = stubSimpleCall(expectedResponse);
            const [response] = await client.partitionQuery(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.partitionQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.partitionQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes partitionQuery without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
            ];
            client.innerApiCalls.partitionQuery =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.partitionQuery(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.partitionQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.partitionQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes partitionQuery with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.partitionQuery = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.partitionQuery(request), expectedError);
            const actualRequest = client.innerApiCalls.partitionQuery.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.partitionQuery.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes partitionQueryStream without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
            ];
            client.descriptors.page.partitionQuery.createStream =
                stubPageStreamingCall(expectedResponse);
            const stream = client.partitionQueryStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.partitionQuery.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.partitionQuery, request));
            assert(client.descriptors.page.partitionQuery.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes partitionQueryStream with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.partitionQuery.createStream =
                stubPageStreamingCall(undefined, expectedError);
            const stream = client.partitionQueryStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.partitionQuery.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.partitionQuery, request));
            assert(client.descriptors.page.partitionQuery.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with partitionQuery without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
                generateSampleMessage(new protos.google.firestore.v1.Cursor()),
            ];
            client.descriptors.page.partitionQuery.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.partitionQueryAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.partitionQuery.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.partitionQuery.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with partitionQuery with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.PartitionQueryRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.PartitionQueryRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.partitionQuery.asyncIterate =
                stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.partitionQueryAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.partitionQuery.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.partitionQuery.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('listCollectionIds', () => {
        (0, mocha_1.it)('invokes listCollectionIds without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listCollectionIds = stubSimpleCall(expectedResponse);
            const [response] = await client.listCollectionIds(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listCollectionIds.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listCollectionIds.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listCollectionIds without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listCollectionIds =
                stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listCollectionIds(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listCollectionIds.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listCollectionIds.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listCollectionIds with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCollectionIds = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCollectionIds(request), expectedError);
            const actualRequest = client.innerApiCalls.listCollectionIds.getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listCollectionIds.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listCollectionIdsStream without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listCollectionIds.createStream =
                stubPageStreamingCall(expectedResponse);
            const stream = client.listCollectionIdsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listCollectionIds, request));
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listCollectionIdsStream with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCollectionIds.createStream =
                stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCollectionIdsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listCollectionIds, request));
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listCollectionIds without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listCollectionIds.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listCollectionIdsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listCollectionIds.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listCollectionIds.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listCollectionIds with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1.ListCollectionIdsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.firestore.v1.ListCollectionIdsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : ''}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCollectionIds.asyncIterate =
                stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCollectionIdsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listCollectionIds.asyncIterate.getCall(0).args[1], request);
            assert(client.descriptors.page.listCollectionIds.asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('getLocation', () => {
        (0, mocha_1.it)('invokes getLocation without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.locationsClient.getLocation
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        (0, mocha_1.it)('invokes getLocation without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = sinon
                .stub()
                .callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getLocation(request, expectedOptions, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.locationsClient.getLocation.getCall(0));
        });
        (0, mocha_1.it)('invokes getLocation with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert(client.locationsClient.getLocation
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    (0, mocha_1.describe)('listLocationsAsync', () => {
        (0, mocha_1.it)('uses async iteration with listLocations without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.Location()),
                generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.Location()),
                generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.Location()),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate =
                stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.locationsClient.descriptors.page.listLocations
                .asyncIterate.getCall(0).args[1], request);
            assert(client.locationsClient.descriptors.page.listLocations
                .asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listLocations with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate =
                stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.locationsClient.descriptors.page.listLocations
                .asyncIterate.getCall(0).args[1], request);
            assert(client.locationsClient.descriptors.page.listLocations
                .asyncIterate
                .getCall(0)
                .args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
});
//# sourceMappingURL=gapic_firestore_v1.js.map